package com.cangwang.utils;

import com.cangwang.bean.ModuleUnitBean;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class ModuleUtil {

    public static final String PROJECT = "ModuleBus";
    public static final String MODULE_UNIT = "ModuleUnit";
    public static final String SEPARATOR = "_";

    public static final String FACADE_PACKAGE = "com.cangwang.core";
    public static final String MODULE_ANNOTATION  = "com.cangwang.annotation";
    public static final String MODULE_MODEL = "com.cangwang.model";
    private static final String TEMPLATE_PACKAGE = ".template";
    public static final String NAME_OF_MODULEGROUP = PROJECT + SEPARATOR + "Group" + SEPARATOR;
    public static final String WARNING_TIPS = "DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY MODULEBUS.";


    public static final String IMODULE_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + ".IModuleGroup";
    public static final String IMODULE_UNIT = FACADE_PACKAGE + TEMPLATE_PACKAGE + ".IModuleUnit";
    public static final String IMODULE_PROXY = MODULE_MODEL + ".IModuleProxy";
    public static final String IMODULE_FACTORY = MODULE_MODEL + ".IModuleFactory";
    public static final String METHOD_GET_MODULE = "getModule";
    public static final String METHOD_FACTROY_GET_INSTANCE = "getInstance";
    public static final String METHOD_FACTROY_GET_TEMPLE_LIST = "getTempleList";

    public static final String NAME_OF_MODULEUNIT = MODULE_UNIT + SEPARATOR;

    public static final String ANNOTATION_TYPE_MODULEUNIT = MODULE_ANNOTATION + "ModuleUnit";

    public static String[] splitDot(String groupName){
        return groupName.split("\\.");
    }

    public static String[] split(String groupName){
        return groupName.split(",");
    }

    public static final String rootPath = System.getProperty("user.dir");
    public static final String ceterFile = "/src/main/assets/center.json";
    public static final String settingFile = System.getProperty("user.dir")+"/settings.gradle";

    public static Logger logger;

    public static Gson gson = new Gson();

    /**
     * 写json文件
     * @param filePath
     * @param sets
     * @throws IOException
     */
    public static void writeJsonFile(String filePath,String sets) throws IOException{
        sets = formatJson(sets,true);
        logger.info(sets);
        writeFile(filePath,sets);
    }


    public static void writeFile(String filePath, String sets)
            throws IOException {
        FileWriter fw = new FileWriter(filePath);
        PrintWriter out = new PrintWriter(fw);
        out.write(sets);
        out.println();
        fw.close();
        out.close();
    }

    public static String readJsonFile(String path){
        File file=new File(path);
        if (!file.exists()) return "";
        BufferedReader reader=null;
        String jsonContent="";
        try {
            reader=new BufferedReader(new FileReader(file));
            String tempString=null;
            while((tempString=reader.readLine())!=null){
                jsonContent+=tempString;
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        finally {
            if(reader!=null){
                try {
                    reader.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            return jsonContent;
        }

    }

    /**
     * 单位缩进字符串。
     */
    private static String SPACE = "   ";

    /**
     * 返回格式化JSON字符串。
     *
     * @param json 未格式化的JSON字符串。
     * @return 格式化的JSON字符串。
     */
    public static String formatJson(String json,boolean isSort)
    {
        StringBuffer result = new StringBuffer();

        int length = json.length();
        int number = 0;
        char key = 0;
        //遍历输入字符串。
        for (int i = 0; i < length; i++)
        {
            //1、获取当前字符。
            key = json.charAt(i);

            //2、如果当前字符是前方括号、前花括号做如下处理：
            if((key == '[') || (key == '{') )
            {
                //（1）如果前面还有字符，并且字符为“：”，打印：换行和缩进字符字符串。
                if((i - 1 > 0) && (json.charAt(i - 1) == ':'))
                {
                    result.append('\n');
                    if (isSort)
                        result.append(indent(number));
                }

                //（2）打印：当前字符。
                result.append(key);

                //（3）前方括号、前花括号，的后面必须换行。打印：换行。
                result.append('\n');

                //（4）每出现一次前方括号、前花括号；缩进次数增加一次。打印：新行缩进。
                number++;
                if (isSort)
                result.append(indent(number));

                //（5）进行下一次循环。
                continue;
            }

            //3、如果当前字符是后方括号、后花括号做如下处理：
            if((key == ']') || (key == '}') )
            {
                //（1）后方括号、后花括号，的前面必须换行。打印：换行。
                result.append('\n');

                //（2）每出现一次后方括号、后花括号；缩进次数减少一次。打印：缩进。
                number--;
                result.append(indent(number));

                //（3）打印：当前字符。
                result.append(key);

                //（4）如果当前字符后面还有字符，并且字符不为“，”，打印：换行。
                if(((i + 1) < length) && (json.charAt(i + 1) != ','))
                {
                    result.append('\n');
                }

                //（5）继续下一次循环。
                continue;
            }

            //4、如果当前字符是逗号。逗号后面换行，并缩进，不改变缩进次数。
            if((key == ','))
            {
                result.append(key);
                result.append('\n');
                if (isSort)
                    result.append(indent(number));
                continue;
            }

            //5、打印：当前字符。
            result.append(key);
        }

        return result.toString();
    }

    /**
     * 返回指定次数的缩进字符串。每一次缩进三个空格，即SPACE。
     *
     * @param number 缩进次数。
     * @return 指定缩进次数的字符串。
     */
    private static String indent(int number)
    {
        StringBuffer result = new StringBuffer();
        for(int i = 0; i < number; i++)
        {
            result.append(SPACE);
        }
        return result.toString();
    }

    public static JsonArray parserJsonArray(String strJson){
        //创建一个Gson对象
//        Gson gson = new Gson();
        //创建一个JsonParser
        JsonParser parser = new JsonParser();
        //通过JsonParser对象可以把json格式的字符串解析成一个JsonElement对象
        JsonElement el = parser.parse(strJson);

//        //把JsonElement对象转换成JsonObject
//        JsonObject jsonObj = null;
//        if(el.isJsonObject()){
//            jsonObj = el.getAsJsonObject();
//        }
//
//        //把JsonElement对象转换成JsonArray
//        JsonArray jsonArray = null;
        if(el.isJsonArray()){
            return el.getAsJsonArray();
        }

        return null;

//        //遍历JsonArray对象
//        Iterator it = jsonArray.iterator();
//        while(it.hasNext()){
//            JsonElement e = (JsonElement)it.next();
//            //JsonElement转换为JavaBean对象
//            ModuleUnitBean bean= gson.fromJson(e, ModuleUnitBean.class);
//        }
    }

    public static void createCenterJson(String moduleName) throws IOException{
        String directory = System.getProperty("user.dir") +"/"+moduleName + "/src/main/assets";
        File dirFile = new File(directory);
        if (!dirFile.exists() && !dirFile.isDirectory()){
            logger.info(directory +" is not exists,to create");
            dirFile.mkdir();
        }
        String path = getJsonAddress(moduleName);
        File file =new File(path);
        boolean deleteResult =file.delete();
        boolean success = file.createNewFile();
        logger.info("deleteResult = "+deleteResult+", path = "+path+",success = "+success);
    }

    public static List<String> readSetting() throws IOException{
        File file = new File(settingFile);
        BufferedReader reader=null;
        String settingContent="";
        try {
            reader=new BufferedReader(new FileReader(file));
            String tempString=null;
            while((tempString=reader.readLine())!=null){
                settingContent+=tempString;
            }
            logger.info(settingContent);
            List<String> moduleNameList = new ArrayList<>();
            String[] moduleList = settingContent.split("':");
            for (int i = 1;i<moduleList.length; i++) {
                moduleNameList.add(moduleList[i].split("'")[0]);
            }
            return moduleNameList;
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return null;
    }

    public static JsonArray listToJson(List<ModuleUnitBean> list){
        JsonArray templetArray = new JsonArray();
        for (ModuleUnitBean b:list){
            templetArray.add(beanToObject(b));
        }
        return templetArray;
    }

    public static JsonObject beanToObject(ModuleUnitBean b){
        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("path",b.getPath());
        jsonObject.addProperty("templet",b.getTemplet());
        jsonObject.addProperty("title",b.getTitle());
        jsonObject.addProperty("layoutLevel",b.getLayoutLevel());
        jsonObject.addProperty("extraLevel",b.getExtraLevel());
        return jsonObject;
    }

    public static String getJsonAddress(String moduleName){
        return rootPath+"/"+moduleName+ceterFile;
    }
}
